#!/bin/bash
# /etc/init.d/minecraft
# version 0.5 2012-01-31 (YYYY-MM-DD)

### BEGIN INIT INFO
# Provides:   minecraft
# Required-Start: $local_fs $remote_fs
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description:    Minecraft server
# Description:    Init script for bukkit server.
### END INIT INFO

# Based on http://www.minecraftwiki.net/wiki/Server_startup_script

#############################
######### SETTINGS ##########
#############################

# Name of server.jar file
SERVICE="craftbukkit-1.1-R3.jar"

# Name to use for the screen instance
SCREEN_NAME="minecraft110"

# User that should run the server
USERNAME="minecraft"

# Path to minecraft directory
MCBASEPATH="/home/${USERNAME}"

# Initial memory usage
INITMEM="512M"

# Maximum amount of memory to use
MAXMEM="1024M"

# Location and name of the server.log
# Default is "server.log"
LOG_PATTERN="logs/server.log"

# Limit the size of LOG_PATTERN to X Megabytes.
# Default is "0" (0 = Unlimited)
LOG_LIMIT=5

# Number of logs to keep.
# Default is "1"
LOG_COUNT=5

# Extra options to pass to bukkit
OPTIONS=""







#############################
####### DO NOT EDIT #########
#############################

LOG_LIMIT=$[LOG_LIMIT*1024*1024]

if [ "$LOG_COUNT" != "" ]; then
	ARG_LOG_COUNT="--log-count $LOG_COUNT"
fi

if [ "$LOG_LIMIT" != "" ]; then
	ARG_LOG_LIMIT="--log-limit $LOG_LIMIT"
fi

if [ "$LOG_PATTERN" != "" ]; then
	ARG_LOG_PATTERN="--log-pattern $LOG_PATTERN"
fi

INVOCATION="java -server -Xmx$MAXMEM -Xms$INITMEM -jar $SERVICE $ARG_LOG_COUNT $ARG_LOG_LIMIT $ARG_LOG_PATTERN $OPTIONS"

# Where the minecraft server directory is located
MCPATH="${MCBASEPATH}/server"

# Where the whole minecraft directory is copied when backup is ran.
BACKUP="${MCBASEPATH}/server.bak"


screen_running(){
	local SCREEN_RUNNING=$(as_user "screen -ls $SCREEN_NAME | grep $SCREEN_NAME")
	if [ "$SCREEN_RUNNING" == "" ]; then
		return 1;
	fi
	return 0;
}

ME=`whoami`
as_user() {
	if [ $ME == $USERNAME ] ; then
		bash -c "$1"
	else
		su - $USERNAME -c "$1"
	fi
}

mc_command(){
	if ( screen_running ); then
		as_user "screen -p 0 -S $SCREEN_NAME -X eval 'stuff \"$1\"\015'"
	fi
}

mc_start() {
	if ( screen_running ); then
		echo "Tried to start but $SERVICE was already running!"
	else
		echo "$SERVICE was not running... starting."
		cd $MCPATH
		LOG_DIR="$MCPATH/$LOG_PATTERN"
		LOG_DIR=${LOG_DIR%/*}
		as_user "mkdir -p $LOG_DIR"
		as_user "cd $MCPATH && screen -dmS $SCREEN_NAME $INVOCATION"
		sleep 3
		if ( screen_running ); then
			echo "$SERVICE is now running."
		else
			echo "Could not start $SERVICE."
		fi
	fi
}

mc_saveoff() {
	if ( screen_running ); then
		echo "$SERVICE is running... suspending saves"
		mc_command "save-off"
		mc_command "save-all"
	else
		echo "$SERVICE was not running. Not suspending saves."
	fi
}

mc_saveon() {
	if ( screen_running ); then
		echo "$SERVICE is running... re-enabling saves"
		mc_command "save-on"
	else
		echo "$SERVICE was not running. Not resuming saves."
	fi
}

mc_stop() {
	if ( screen_running ); then
		echo "$SERVICE is running... stopping."
		mc_command "save-all"
		sleep 5
		mc_command "stop"
		sleep 10
	else
		echo "$SERVICE was not running."
	fi
	if ( screen_running ); then
		echo "$SERVICE is still running."
		echo "$SERVICE will now receive a second stop command."
		mc_command "stop"
		sleep 10
	fi
	if ( screen_running ); then
		echo "$SERVICE could not be shut down... still running."
	else
		echo "$SERVICE is shut down."
	fi
}

mc_backup() {
	echo "Backup $MCPATH/ to $BACKUP/incremental"
	as_user "mkdir -p $BACKUP/incremental"
	# This makes an exact copy of server. Excluding dynmap's potentionally huge image folder.
	# Don't panic over the delete. It just deletes files in the backup that are removed in the original.
	as_user "rsync -qvaz --delete --exclude=plugins/dynmap/web/tiles/ $MCPATH/ $BACKUP/incremental"
	echo "Backup finished for $MCPATH/ to $BACKUP/incremental"
}

case "$1" in
	start)
		# Starts the server
		mc_start
		;;
	stop)
		# Stops the server
		mc_command "say SERVER SHUTTING DOWN IN 5 SECONDS!"
		mc_stop
		;;
	restart)
		# Restarts the server
		mc_command "say SERVER REBOOT IN 5 SECONDS."
		mc_stop
		echo "sleeping for 5 seconds. Before starting server again."
		sleep 5
		mc_start
		;;
	backup)
		# Backups world
		mc_command "say Backing up world."
		mc_saveoff
		mc_backup
		mc_saveon
		mc_command "say Backup complete."
		;;
	status)
		# Shows server status
		if ( screen_running ); then
			echo "$SERVICE is running."
		else
			echo "$SERVICE is not running."
		fi
		;;
	mcinfo)
		echo "$USERNAME $SCREEN_NAME $MCPATH/$LOG_PATTERN"
		;;
	version)
		echo Craftbukkit version `awk '/CraftBukkit/ {sub(/\)/, ""); print $12}' $MCPATH/server.log`
		;;
	help)
		echo "Usage: /etc/init.d/minecraft command"
		echo ""
		echo "start - Starts the server"
		echo "stop - stops the server"
		echo "restart - restarts the server"
		echo "backup - backups the server up to $BACKUP"
		echo "status - Shows server status"
		echo "mcinfo - Info useful to scripts."
		echo "version - returns Bukkit version"
		;;
	*)
		echo "No such command see /etc/init.d/minecraft help"
		exit 1
		;;
esac

exit 0
